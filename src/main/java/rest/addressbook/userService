 ]package rest.adressbook;
 
 
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.jaxrs.JavaHelp;
 
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
 
@Path("/contacts/")
@Api(value = "/contacts", description = "Operaciones con usuarios")
@Produces(MediaType.APPLICATION_JSON)
public class userService extends JavaHelp {
 
    @GET
    @Path("/contacts")
    @ApiOperation(
            //value = "Devuelve todos los usuarios",
            //notes = "Devuelve todos los usuarios del sistema"
    )
    public Response listUsers() {
        // código
    }
 
    @GET
    @Path("/contacts/person/{id}")
    @ApiOperation(
            //value = "Busca un usuario por ID",
            //notes = "Devuelve los datos relativos a un usuario"
    )
    public Response findById(
            @ApiParam(value = "ID del usuario a buscar", allowableValues = "range[1," + Integer.MAX_VALUE + "]", required = true)
            @PathParam("id") int id) {
        // código
    }
 
    @POST
    @Path("/contacts")
    @Consumes({MediaType.APPLICATION_JSON})
    @ApiOperation(
            value = "Da de alta un nuevo usuario",
            notes = "Crea un nuevo usuario a partir de un ID y un nombre. El usuario no debe existir"
    )
    public Response addUser(
            @ApiParam(value = "Datos del nuevo usuario", required = true)
            Person newUser) {
		// código
    }
 
    @PUT
    @Path("/contacts/person/{id}")
    @Consumes({MediaType.APPLICATION_JSON})
    @ApiOperation(
            value = "Actualiza los datos de un usuario",
            notes = "Actualiza los datos del usuario que se corresponda con el id. El usuario debe existir"
    )
    public Response updateUser(@PathParam("id") int id,
                               @ApiParam(value = "Datos del usuario a actualizar", required = true)
                               Person userToUpdate) {
        // código        
    }
 
    @DELETE
    @Path("/contacts/person/{id}")
    @ApiOperation(
            value = "Elimina un usuario",
            notes = "Elimina los datos del usuario que se corresponda con el id. El usuario debe existir"
    )
    public Response removeUser(
            @ApiParam(value = "ID del usuario a eliminar", allowableValues = "range[1," + Integer.MAX_VALUE + "]", required = true)
            @PathParam("id") int id) {
        // código        
    }
 
}
